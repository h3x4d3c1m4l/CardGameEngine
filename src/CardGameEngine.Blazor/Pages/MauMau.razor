@page "/"
@implements IDisposable
<style>
    html, body, app {
        height: 100%;
    }

    .margin-top-30 {
        margin-top: 30px;
    }

    .text-align-center {
        text-align: center;
    }

    .hand {
        overflow-x: scroll;
        display: flex;
        flex-wrap: wrap;
        grid-template-columns: repeat(1000, minmax(25px, max-content));
    }

    .card {
        outline: none;
        padding: 3px 0px 3px 3px;
        margin: 5px -50px 3px 0px;
        border: 1px solid #DDDDDD;
    }

    .card-selected {
        box-shadow: 0 0 5px rgba(81, 203, 238, 1);
        padding: 3px 0px 3px 3px;
        margin: 5px -50px 3px 0px;
        border: 1px solid rgba(81, 203, 238, 1);
    }

    .is-players-turn:before {
        content: '';
        background-image: url('/icons/right-arrow.svg');
        background-size: 20px;
        width: 20px;
        height: 20px;
        position: absolute;
        left: -30px;
        top: 2px;
    }

    ul.playerslist li {
        position: relative;
        list-style: none;
    }

    .last-card {
        font-weight: bold;
    }

    .player-lastcard {
        color: red;
        font-weight: bold;
    }
</style>
<div class="container h-100">
    <div class="row">
        <div class="col-12">
            @if (_game == null)
            {
                <div class="row justify-content-center">
                    <div class="col-sm">
                        <input type="text" class="form-control margin-top-30" placeholder="Your name" @bind-value="_myName" />
                    </div>
                    <div class="col-sm">
                        <input type="text" class="form-control margin-top-30" placeholder="Join code" @bind-value="_joinCode" />
                        <div class="text-align-center">
                            <button @onclick="e => JoinGame()" class="btn-primary margin-top-30">Join game</button>
                        </div>
                    </div>
                    <div class="col-sm">
                        <button @onclick="e => NewGame()" class="btn-primary margin-top-30">Start new game</button>
                    </div>
                </div>
            }
            else
            {
                <div class="row d-flex bd-highlight mb-3">
                    <div class="col-md-6 col-sm-12">
                        <div class="row">
                            <div class="col-12 p-2 bd-highlight hidden-md">
                                @{
                                    bool myTurn = _game.CurrentPlayer?.Value == _me;
                                }
                                <span class="@(myTurn? "is-players-turn":string.Empty)">Current player: @(myTurn ? "me" : _game.CurrentPlayer?.Value.Name)</span>
                            </div>
                            <div class="col-12 p-2 bd-highlight">
                                @{
                                    FrenchPlayingCard lastPlayedCard = _game.PlayingStack.Peek();
                                }
                                <svg width="88.32" height="127.33" @ontouchstart="e => Pick()" @onclick="e => Pick()">
                                    <use xlink:href="/lib/svg-cards.svg#back" transform="scale(0.50)" fill="red" />
                                </svg>
                                <svg width="88.32" height="127.33">
                                    @((MarkupString)$"<use xlink:href=\"/lib/svg-cards.svg#{GetSvgCode(lastPlayedCard)}\" transform=\"scale(0.50)\" />")
                                </svg>
                                @if (lastPlayedCard.HasRankJack)
                                {
                                    <text>Current playing color:</text>
                                    switch (_game.SuitForCurrentPlayer)
                                    {
                                        case FrenchPlayingCardSuits.Hearts:
                                            <span class="suit-logo suit-red">♥</span>
                                            break;
                                        case FrenchPlayingCardSuits.Diamonds:
                                            <span class="suit-logo suit-red">♦</span>
                                            break;
                                        case FrenchPlayingCardSuits.Spades:
                                            <span class="suit-logo">♠️</span>
                                            break;
                                        case FrenchPlayingCardSuits.Clubs:
                                            <span class="suit-logo">♣</span>
                                            break;
                                    }
                                }
                            </div>
                            <div class="col-12 p-2 bd-highlight">
                                @if (_game.GameWonBy != null)
                                {
                                    <audio controls="controls" autoplay style="display:none;">
                                        <source src="@GetRandomSoundEffect()" type="audio/mp3" />
                                    </audio>
                                    <h1>Game won by: @(_game.GameWonBy == _me ? "me!" : _game.GameWonBy.Name)</h1>
                                    @if (_game.GameWonBy == _me)
                                    {
                                        <p>Click this button to start a new game:</p>
                                        <button @onclick="e=>Reset()">reset</button>
                                    }
                                    else
                                    {
                                        <p>Wait for the winner to start a new game or return to the homescreen by refreshing...</p>
                                    }
                                }
                                else
                                {
                                    @if (_error != null)
                                    {
                                        <p style="color: red">@_error</p>
                                    }
                                    @if (_game.DrawnACard == _me)
                                    {
                                        <button @onclick="e => SkipTurn()">Skip turn</button>
                                    }
                                    <div class="hand">
                                        @{
                                            foreach (var c in _me.Cards)
                                            {
                                                <svg width="88.32" height="127.33" @ontouchstart="e => PlayCard(c)" @onclick="e => PlayCard(c)" class="card @(SelectedCard == c ? "card-selected" : null))">
                                                    @((MarkupString)$"<use xlink:href=\"/lib/svg-cards.svg#{GetSvgCode(c)}\" transform=\"scale(0.50)\" />")
                                                </svg>
                                            }
                                        }
                                    </div>
                                    @if (SelectedCard?.Rank == FrenchPlayingCardRanks.Jack)
                                    {
                                        <button class="suit-logo" @onclick="e => PlayCard(SelectedCard, FrenchPlayingCardSuits.Spades)">♠️</button>
                                        <button class="suit-logo suit-red" @onclick="e => PlayCard(SelectedCard, FrenchPlayingCardSuits.Hearts)">♥</button>
                                        <button class="suit-logo suit-red" @onclick="e => PlayCard(SelectedCard, FrenchPlayingCardSuits.Diamonds)">♦</button>
                                        <button class="suit-logo" @onclick="e => PlayCard(SelectedCard, FrenchPlayingCardSuits.Clubs)">♣</button>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 col-sm-12 p-2 bd-highlight">
                        <div class="col-sm">
                            <p>Playing <b>@(_game.PlayingCounterwise ? "counter clockwise" : "clockwise")</b>, <b>@_game.DrawingStack.Count</b> cards on drawing stock, code for joining is <b>@_guid</b></p>
                            <p>
                                @if (_game.AmountOfCardsCurrentPlayerNeedsToDraw > 0)
                                {
                                    <span style="font-size:@(8+_game.AmountOfCardsCurrentPlayerNeedsToDraw)px;">Amount of cards to draw: @_game.AmountOfCardsCurrentPlayerNeedsToDraw</span>
                                }
                                else
                                {
                                    <span style="font-size:10px;">&nbsp;</span>
                                }
                            </p>
                        </div>
                        <div class="col-sm">
                            @if (_game.LinkedPlayers.Any(x => x.Cards.Count == 1))
                            {
                                <audio controls="controls" autoplay style="display:none;">
                                    <source src="/sounds/attention.mp3" type="audio/mp3" />
                                </audio>
                            }
                            <ul class="playerslist">
                                @foreach (Player p in _game.LinkedPlayers)
                                {
                                    @if (p == _me)
                                    {
                                        <li class="@GetCssClassForPlayer(p)">
                                            Me, I have <b>@p.Cards.Count</b> @{ if (p.Cards.Count > 1)
                                                { <text>cards</text> }
                                            else
                                            { <text>card</text> }}
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="@GetCssClassForPlayer(p)">
                                            @p.Name, has <b>@p.Cards.Count</b>@if (p.Cards.Count == 1)
                                            {<text> card❗</text>}
                                        else
                                        { <text> cards</text>}
                                        </li>
                                    }
                                }
                            </ul>
                        </div>
                    </div>
                    <div class="col-sm">
                        Last 10 events:
                        <ol>
                            @for (var i = _game.Events.Count - 1; i >= 0; i--)
                            {
                                <li>@_game.Events[i]</li>
                            }
                        </ol>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private static Dictionary<Guid, MauMauGame<Player>> RunningGames { get; set; } = new Dictionary<Guid, MauMauGame<Player>>();

    private static IPlayingCardShuffler Shuffler = new PlayingCardRandomShuffler();

    private static Standard52CardDeckFactory DeckFactory = new Standard52CardDeckFactory();

    private MauMauGame<Player> _game;

    private int currentCount = 0;

    private bool _soundPlayed = false;

    private Player _me;

    private string _error;

    private string _joinCode;

    private Guid _guid;

    private string _myName;

    private string GetRandomSoundEffect()
    {
        if (!_soundPlayed)
        {
            string soundEffectPath = string.Empty;
            string[] soundEffects = new string[] { "/Alweer_een_winnaar.mp3", "/GOEDZO_KNUL.mp3", "/haha.mp3", "/Yieehoe.mp3", "/Game_Over.mp3" };
            int idx = new Random().Next(soundEffects.Length);

            soundEffectPath = soundEffects[idx];
            _soundPlayed = true;

            return "/sounds" + soundEffectPath;
        }
        return string.Empty;
    }

    private string GetCssClassForPlayer(Player player)
    {
        string cssClass = string.Empty;

        if (player == _game.CurrentPlayer?.Value)
        {
            cssClass = "is-players-turn";
        }

        if (player.Cards.Count == 1)
        {
            if (string.IsNullOrWhiteSpace(cssClass))
            {
                cssClass = "last-card";
            }
            else
            {
                cssClass += " last-card";
            }
        }
        return cssClass;
    }

    private void IncrementCount()
    {
        currentCount++;
    }

    private void NewGame()
    {
        if (string.IsNullOrWhiteSpace(_myName))
            return;

        _me = new Player { Name = _myName };
        _guid = Guid.NewGuid();
        _game = new MauMauGame<Player>(DeckFactory, Shuffler, new List<Player> { _me }, options =>
        {
            options.AmountOfDecks = 3;
            options.AmountOfCardsPerPlayer = 7;
        });
        RunningGames.Add(_guid, _game);
        _game.StateChanged += StateChanged;
    }

    private void Reset()
    {
        _soundPlayed = false;
        _game.Reset();
    }

    private void JoinGame()
    {
        if (string.IsNullOrWhiteSpace(_myName))
            return;

        try
        {
            _me = new Player { Name = _myName };
            _guid = Guid.Parse(_joinCode);
            _game = RunningGames[_guid];
            _game.AddPlayer(_me);
            _game.StateChanged += StateChanged;
        }
        catch (Exception)
        {

        }
    }

    private void StateChanged(object source, EventArgs args)
    {
        InvokeAsync(StateHasChanged);
    }

    private FrenchPlayingCard SelectedCard;

    private void SkipTurn()
    {
        try
        {
            SelectedCard = null;
            _game.PlayCard(_me, null, null);
        }
        catch (Exception ex)
        {
            if (ex is NotThePlayersTurnException)
                _error = "Please wait for your turn!";
            else
                _error = "Error!";
        }
    }

    private void PlayCard(FrenchPlayingCard card = null, FrenchPlayingCardSuits? newSuit = null)
    {
        _error = null;
        if (SelectedCard == null || SelectedCard != card)
        {
            SelectedCard = card;
        }
        else if (SelectedCard == card && (SelectedCard.Rank != FrenchPlayingCardRanks.Jack || newSuit != null))
        {
            try
            {
                _game.PlayCard(_me, card, newSuit);
            }
            catch (Exception ex)
            {
                if (ex is CardNotAllowedException)
                    _error = "This card is not allowed at this time!";
                else if (ex is NotThePlayersTurnException)
                    _error = "Please wait for your turn!";
                else
                    _error = "Error!";
            }
            SelectedCard = null;
            StateHasChanged();
        }
    }

    private void Pick()
    {
        try
        {
            SelectedCard = null;
            _game.PickFromStack(_me);
        }
        catch (Exception ex)
        {
            if (ex is NotThePlayersTurnException)
                _error = "Please wait for your turn!";
            else
                _error = "Error!";
        }

    }

    private static string GetSvgCode(FrenchPlayingCard card)
    {
        if (card.IsJoker)
        {
            return "joker_red";
        }
        else
        {
            string part1 = null, part2 = null;
            if (card.Suit == FrenchPlayingCardSuits.Clubs)
                part1 = "club";
            else if (card.Suit == FrenchPlayingCardSuits.Diamonds)
                part1 = "diamond";
            else if (card.Suit == FrenchPlayingCardSuits.Hearts)
                part1 = "heart";
            else if (card.Suit == FrenchPlayingCardSuits.Spades)
                part1 = "spade";
            else
                throw new Exception();

            if (card.Rank == FrenchPlayingCardRanks.Ace)
                part2 = "1";
            else if (card.Rank == FrenchPlayingCardRanks.Two)
                part2 = "2";
            else if (card.Rank == FrenchPlayingCardRanks.Three)
                part2 = "3";
            else if (card.Rank == FrenchPlayingCardRanks.Four)
                part2 = "4";
            else if (card.Rank == FrenchPlayingCardRanks.Five)
                part2 = "5";
            else if (card.Rank == FrenchPlayingCardRanks.Six)
                part2 = "6";
            else if (card.Rank == FrenchPlayingCardRanks.Seven)
                part2 = "7";
            else if (card.Rank == FrenchPlayingCardRanks.Eight)
                part2 = "8";
            else if (card.Rank == FrenchPlayingCardRanks.Nine)
                part2 = "9";
            else if (card.Rank == FrenchPlayingCardRanks.Ten)
                part2 = "10";
            else if (card.Rank == FrenchPlayingCardRanks.Jack)
                part2 = "jack";
            else if (card.Rank == FrenchPlayingCardRanks.Queen)
                part2 = "queen";
            else if (card.Rank == FrenchPlayingCardRanks.King)
                part2 = "king";
            else
                throw new Exception();

            return $"{part1}_{part2}";
        }
    }

    public void Dispose()
    {
        if (_game != null && _me != null)
        {
            _game.StateChanged -= StateChanged;
            _game.RemovePlayer(_me);
            if (!_game.LinkedPlayers.Any())
            {
                RunningGames.Remove(_guid);
            }
        }
    }
}
